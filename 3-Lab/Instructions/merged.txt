
BType.cpp
#include "BType.h"

std::unordered_map<uint8_t, std::string> BType::mnemonics{
    {0b000, "beq"},
    {0b001, "bne"},
    {0b100, "blt"},
    {0b101, "bge"},
    {0b110, "bltu"},
    {0b111, "bgeu"},
};

BType.h
#include <Instruction.h>

class BType : public Instruction {
   private:
    static std::unordered_map<uint8_t, std::string> mnemonics;

   public:
    explicit BType(uint32_t bits) : Instruction(bits) {}
    ~BType() override = default;

    bool needLabel() const override {
        return true;
    }

    uint32_t getImmAddr() const override {
        return address + getImm();
    }

   private:
    std::string instructionString() const override {
        return getMnemonic() + '\t' + parseRs1(bits) + ", " + parseRs2(bits) + ", " + parseImm();
    }

    int16_t getImm() const {
        int16_t imm = 0;
        imm += isBitSet(bits, 7) ? (1 << 11) : 0;

        for (size_t i = 0; i < 4; i++) {
            imm += isBitSet(bits, i + 7 + 1) ? (1 << (i + 1)) : 0;
        }

        for (size_t i = 0; i < 6; i++) {
            imm += isBitSet(bits, i + 25) ? (1 << (i + 5)) : 0;
        }

        imm -= (bits & (1 << (25 + 6))) > 0 ? (1 << 12) : 0;

        return imm;
    }

    std::string parseImm() const {
        return toHexString(address + getImm());
    }

    std::string getMnemonic() const {
        return mnemonics[parseFunct3(bits)];
    }
};


EType.h
#pragma once
#include <Instruction.h>

class EType : public Instruction {
   public:
    explicit EType(uint32_t bits) : Instruction(bits) {}
    ~EType() override = default;

   private:
    std::string instructionString() const override {
        return getMnemonic() + "\t\t";
    }

    std::string getMnemonic() const {
        if ((bits >> 20) == 0) {
            return "ecall";
        } else if ((bits >> 20) == 1) {
            return "ebreak";
        } else {
            return "unknown EType";
        }
    }
};

IAddrType.cpp
#include "IAddrType.h"

// [funct3 | opcode[6]]
std::unordered_map<uint8_t, std::string> IAddrType::mnemonics{
    {0b0001, "jalr"},
    {0b0000, "lb"},
    {0b0010, "lh"},
    {0b0100, "lw"},
    {0b1000, "lbu"},
    {0b1010, "lhu"},
};

IAddrType.h
#include <Instruction.h>

class IAddrType : public Instruction {
   private:
    static std::unordered_map<uint8_t, std::string> mnemonics;

   public:
    explicit IAddrType(uint32_t bits) : Instruction(bits) {}
    ~IAddrType() override = default;

    std::string instructionString() const override {
        return getMnemonic() + '\t' + parseRd(bits) + ", " + parseImm12() + '(' + parseRs1(bits) + ')';
    }

   private:
    std::string parseImm12() const {
        int16_t imm12 = 0;
        for (size_t i = 0; i < 11; i++) {
            imm12 += isBitSet(bits, i + 20) > 0 ? (1 << i) : 0;
        }

        imm12 -= isBitSet(bits, 11 + 20) > 0 ? (1 << 11) : 0;

        return std::to_string(imm12);
    }

    std::string getMnemonic() const {
        uint8_t key = (parseFunct3(bits) << 1) + (isBitSet(bits, 6) ? 1 : 0);
        return mnemonics[key];
    }
};


IType.cpp
#include "IType.h"

std::unordered_map<uint8_t, std::string> IType::mnemonics{
    {0b000, "addi"},
    {0b010, "slti"},
    {0b011, "sltiu"},
    {0b100, "xori"},
    {0b110, "ori"},
    {0b111, "andi"},

    // shamt [funct7 >> 5 | funct3]
    {0b0001, "slli"},
    {0b0101, "srli"},
    {0b1101, "srai"},
};

IType.h
#include <Instruction.h>

class IType : public Instruction {
   private:
    bool isShamt;
    static std::unordered_map<uint8_t, std::string> mnemonics;

   public:
    IType(uint32_t bits) : Instruction(bits) {
        uint8_t funct3 = parseFunct3(bits);
        isShamt = funct3 == 0b001 || funct3 == 0b101;
    }
    ~IType() = default;

    std::string instructionString() const override {
        return getMnemonic() + '\t' + parseRd(bits) + ", " + parseRs1(bits) + ", " + parseImm12();
    }

   private:
    std::string parseImm12() const {
        int16_t imm12 = 0;
        for (size_t i = 0; i < 11; i++) {
            imm12 += isBitSet(bits, i + 20) > 0 ? (1 << i) : 0;
        }

        imm12 -= isBitSet(bits, 11 + 20) > 0 ? (1 << 11) : 0;

        return std::to_string(imm12);
    }

    std::string getMnemonic() const {
        uint8_t key = parseFunct3(bits);
        if (isShamt) {
            key += isBitSet(parseFunct7(bits), 5) ? 0b1000 : 0;
        }

        return mnemonics[key];
    }
};


JType.h
#pragma once
#include <Instruction.h>

class JType : public Instruction {
   public:
    explicit JType(uint32_t bits) : Instruction(bits) {}
    ~JType() override = default;

    bool needLabel() const override {
        return true;
    }

    uint32_t getImmAddr() const override {
        return address + getImm();
    }

   private:
    std::string instructionString() const override {
        return getMnemonic() + '\t' + parseRd(bits) + ", " + parseImm();
    }

    int32_t getImm() const {
        int32_t imm = 0;

        for (size_t i = 12; i < 20; i++) {
            imm += isBitSet(bits, i) ? (1 << i) : 0;
        }

        imm += isBitSet(bits, 20) ? (1 << 11) : 0;

        for (size_t i = 0; i < 10; i++) {
            imm += isBitSet(bits, i + 21) ? (1 << (i + 1)) : 0;
        }

        imm -= isBitSet(bits, 31) ? (1 << 20) : 0;
        return imm;
    }

    std::string parseImm() const {
        return toHexString(address + getImm());
    }

    static std::string getMnemonic() {
        return "jal";
    }
};


RType.cpp
#include "RType.h"

std::unordered_map<uint16_t, std::string> RType::mnemonics{
    // RV32I
    {0b0000000000, "add"},
    {0b0100000000, "sub"},
    {0b0000000001, "sll"},
    {0b0000000010, "slt"},
    {0b0000000011, "sltu"},
    {0b0000000100, "xor"},
    {0b0000000101, "srl"},
    {0b0100000101, "sra"},
    {0b0000000110, "or"},
    {0b0000000111, "and"},

    // RV32M
    {0b0000001000, "mul"},
    {0b0000001001, "mulh"},
    {0b0000001010, "mulhsu"},
    {0b0000001011, "mulhu"},
    {0b0000001100, "div"},
    {0b0000001101, "divu"},
    {0b0000001110, "rem"},
    {0b0000001111, "remu"},
};

RType.h
#include <Instruction.h>

class RType : public Instruction {
   private:
    static std::unordered_map<uint16_t, std::string> mnemonics;

   public:
    explicit RType(uint32_t bits) : Instruction(bits) {}
    ~RType() override = default;

    std::string instructionString() const override {
        return getMnemonic() + '\t' + parseRd(bits) + ", " + parseRs1(bits) + ", " + parseRs2(bits);
    }

   private:
    std::string getMnemonic() const {
        uint16_t key = (parseFunct7(bits) << 3) + parseFunct3(bits);
        return mnemonics[key];
    }
};


SType.cpp
#include "SType.h"

std::unordered_map<uint8_t, std::string> SType::mnemonics{
    {0b000, "sb"},
    {0b001, "sh"},
    {0b010, "sw"},
};

SType.h
#include <Instruction.h>

class SType : public Instruction {
   private:
    static std::unordered_map<uint8_t, std::string> mnemonics;

   public:
    explicit SType(uint32_t bits) : Instruction(bits) {}
    ~SType() override = default;

   private:
    std::string instructionString() const override {
        return getMnemonic() + '\t' + parseRs2(bits) + ", " + parseImm() + '(' + parseRs1(bits) + ')';
    }

    std::string parseImm() const {
        int16_t imm = 0;

        for (size_t i = 0; i < 5; i++) {
            imm += isBitSet(bits, i + 7) ? (1 << i) : 0;
        }

        for (size_t i = 0; i < 6; i++) {
            imm += isBitSet(bits, i + 25) ? (1 << (i + 5)) : 0;
        }

        imm -= (bits & (1 << (25 + 6))) > 0 ? (1 << 11) : 0;

        return std::to_string(imm);
    }

    std::string getMnemonic() const {
        return mnemonics[parseFunct3(bits)];
    }
};


UnknownType.h
#include <Instruction.h>

class UnknownType : public Instruction {
   public:
    explicit UnknownType(uint32_t bits) : Instruction(bits) {}
    ~UnknownType() override = default;

   private:
    std::string instructionString() const override {
        return "unknown_instruction";
    }
};


UType.h
#include <Instruction.h>

class UType : public Instruction {
   public:
    explicit UType(uint32_t bits) : Instruction(bits) {}
    ~UType() override = default;

   private:
    std::string instructionString() const override {
        return getMnemonic() + '\t' + parseRd(bits) + ", 0x" + parseImm();
    }

    std::string parseImm() const {
        int32_t imm = 0;

        for (size_t i = 12; i < 32; i++) {
            imm += isBitSet(bits, i) ? (1 << i) : 0;
        }

        const std::string s = toHexString(imm);
        return s.substr(0, s.length() - 3);
    }

    std::string getMnemonic() const {
        const uint8_t opcode = parseOpcodeBits(bits);
        if (opcode == 0b0110111) {
            return "lui";
        } else if (opcode == 0b0010111) {
            return "auipc";
        } else {
            throw std::runtime_error("Opcode '" + std::to_string(opcode) + "' doesn't match UType instruction");
        }
    }
};
