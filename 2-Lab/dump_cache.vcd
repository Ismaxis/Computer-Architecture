$date
	Wed Nov 30 00:36:21 2022
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module testbench $end
$var wire 3 ! cpu_command [2:0] $end
$var wire 16 " mem_data [15:0] $end
$var wire 2 # mem_command [1:0] $end
$var wire 15 $ mem_address [14:0] $end
$var wire 16 % cpu_data [15:0] $end
$var wire 15 & cpu_address [14:0] $end
$var reg 1 ' clk $end
$var reg 1 ( reset $end
$scope module cache $end
$var wire 1 ' clk $end
$var wire 3 ) cpu_command [2:0] $end
$var wire 16 * cpu_data [15:0] $end
$var wire 15 + mem_address [14:0] $end
$var wire 2 , mem_command [1:0] $end
$var wire 1 ( reset $end
$var wire 16 - mem_data [15:0] $end
$var wire 15 . cpu_address [14:0] $end
$var reg 3 / cpu_command_buff [2:0] $end
$var reg 16 0 cpu_data_bus_buff [15:0] $end
$var reg 4 1 cpu_offset_buff [3:0] $end
$var reg 15 2 mem_address_buff [14:0] $end
$var reg 2 3 mem_command_buff [1:0] $end
$var reg 128 4 mem_line_buff [127:0] $end
$scope begin $ivl_for_loop0 $end
$var integer 32 5 i [31:0] $end
$upscope $end
$scope task delay $end
$upscope $end
$upscope $end
$scope module cpu $end
$var wire 1 ' clk $end
$var wire 3 6 command [2:0] $end
$var wire 16 7 data [15:0] $end
$var wire 15 8 address [14:0] $end
$var reg 19 9 cpu_address_buff [18:0] $end
$var reg 3 : cpu_command_buff [2:0] $end
$var reg 16 ; recieved_data [15:0] $end
$scope task delay $end
$upscope $end
$upscope $end
$scope module mem $end
$var wire 15 < address [14:0] $end
$var wire 1 ' clk $end
$var wire 2 = command [1:0] $end
$var wire 16 > data [15:0] $end
$var wire 1 ( reset $end
$var reg 2 ? command_buff [1:0] $end
$var reg 16 @ data_buff [15:0] $end
$var reg 4 A rwPosition [3:0] $end
$var integer 32 B SEED [31:0] $end
$scope begin $ivl_for_loop1 $end
$var integer 32 C i [31:0] $end
$upscope $end
$scope begin $ivl_for_loop2 $end
$var integer 32 D i [31:0] $end
$upscope $end
$scope begin $ivl_for_loop3 $end
$var integer 32 E i [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
b0 E
b0 D
b0 C
b110111000011110110 B
bx A
bx @
bx ?
bx >
bx =
bx <
b0 ;
bx :
bx 9
bx 8
b0 7
bx 6
b0 5
b0 4
bx 3
bx 2
bx 1
b0 0
bz /
bx .
bx -
bx ,
bx +
b0 *
bx )
0(
x'
bx &
b0 %
bx $
bx #
bx "
bx !
$end
#1
b0 A
b0 ?
b0 "
b0 -
b0 >
b0 @
b1000 C
b10111101101100001001111000001110 B
1(
#2
b11 &
b11 .
b11 8
b11 9
b1 !
b1 )
b1 6
b1 :
0'
0(
#3
1'
#4
b10 &
b10 .
b10 8
b11 $
b11 +
b11 <
b11 2
b10 9
0'
#5
1'
#6
b10 #
b10 ,
b10 =
b10 3
b10 1
bz !
bz )
bz 6
bz :
0'
#7
b10 A
b1001010110111100 "
b1001010110111100 -
b1001010110111100 >
b1001010110111100 @
b10000 D
1'
#8
b1001010110111100 4
0'
#9
b100 A
b1111111111111111 "
b1111111111111111 -
b1111111111111111 >
b1111111111111111 @
b10000 D
1'
#10
b11111111111111111001010110111100 4
b1 5
0'
#11
b110 A
b10000 D
1'
#12
b111111111111111111111111111111111001010110111100 4
b10 5
0'
#13
b1000 A
b10000 D
1'
#14
b1111111111111111111111111111111111111111111111111001010110111100 4
b11 5
0'
#15
b1010 A
b10000 D
1'
#16
b11111111111111111111111111111111111111111111111111111111111111111001010110111100 4
b100 5
0'
#17
b1100 A
b10000 D
1'
#18
b111111111111111111111111111111111111111111111111111111111111111111111111111111111001010110111100 4
b101 5
0'
#19
b1110 A
b10000 D
1'
#20
b1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111001010110111100 4
b110 5
0'
#21
b0 A
b0 "
b0 -
b0 >
b0 @
b10000 D
1'
#22
b111 5
0'
#23
b10 A
b1001010110111100 "
b1001010110111100 -
b1001010110111100 >
b1001010110111100 @
b10000 D
1'
#24
b111 !
b111 )
b111 6
b111 /
b11111111 %
b11111111 *
b11111111 7
b11111111 0
b0 #
b0 ,
b0 =
b0 3
b1000 5
0'
#25
b0 A
1'
#26
bz !
bz )
bz 6
bz /
b11111111 ;
0'
