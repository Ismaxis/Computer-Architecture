$date
	Thu Dec 01 00:16:22 2022
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module testbench $end
$var wire 3 ! cpu_command [2:0] $end
$var wire 16 " cpu_data [15:0] $end
$var wire 16 # mem_data [15:0] $end
$var wire 2 $ mem_command [1:0] $end
$var wire 15 % mem_address [14:0] $end
$var wire 15 & cpu_address [14:0] $end
$var reg 1 ' clk $end
$var reg 1 ( reset $end
$scope module cache $end
$var wire 1 ' clk $end
$var wire 3 ) cpu_command [2:0] $end
$var wire 16 * cpu_data [15:0] $end
$var wire 15 + mem_address [14:0] $end
$var wire 2 , mem_command [1:0] $end
$var wire 16 - mem_data [15:0] $end
$var wire 1 ( reset $end
$var wire 15 . cpu_address [14:0] $end
$var reg 3 / cpu_command_buff [2:0] $end
$var reg 16 0 cpu_data_bus_buff [15:0] $end
$var reg 32 1 cpu_data_to_write [31:0] $end
$var reg 4 2 cpu_offset_buff [3:0] $end
$var reg 5 3 cpu_set_buff [4:0] $end
$var reg 7 4 cpu_tag_buff [6:0] $end
$var reg 3 5 cur_cpu_command [2:0] $end
$var reg 1 6 index_in_set $end
$var reg 15 7 mem_address_buff [14:0] $end
$var reg 2 8 mem_command_buff [1:0] $end
$var reg 16 9 mem_data_buff [15:0] $end
$var reg 128 : mem_line_buff [127:0] $end
$scope begin $ivl_for_loop2 $end
$var integer 32 ; i [31:0] $end
$upscope $end
$scope task delay $end
$upscope $end
$scope task read_cpu_address $end
$upscope $end
$scope task read_from_storage $end
$upscope $end
$scope task replace_from_MM $end
$scope begin $ivl_for_loop0 $end
$var integer 32 < i [31:0] $end
$upscope $end
$upscope $end
$scope task store $end
$upscope $end
$scope task update_flags $end
$upscope $end
$scope task write_to_MM $end
$scope begin $ivl_for_loop1 $end
$var integer 32 = i [31:0] $end
$upscope $end
$upscope $end
$scope task write_to_storage $end
$upscope $end
$upscope $end
$scope module cpu $end
$var wire 15 > address [14:0] $end
$var wire 1 ' clk $end
$var wire 3 ? command [2:0] $end
$var wire 16 @ data [15:0] $end
$var reg 15 A address_bus_buff [14:0] $end
$var reg 19 B cpu_address_buff [18:0] $end
$var reg 3 C cpu_command_buff [2:0] $end
$var reg 16 D data_buff [15:0] $end
$var reg 32 E data_to_write [31:0] $end
$var reg 32 F local_storage [31:0] $end
$var reg 16 G recieved_data [15:0] $end
$scope task INV $end
$upscope $end
$scope task READ $end
$upscope $end
$scope task READ16 $end
$upscope $end
$scope task READ32 $end
$upscope $end
$scope task READ8 $end
$upscope $end
$scope task WRITE $end
$upscope $end
$scope task WRITE16 $end
$upscope $end
$scope task WRITE32 $end
$upscope $end
$scope task WRITE8 $end
$upscope $end
$scope task delay $end
$upscope $end
$scope task eviction_test $end
$upscope $end
$scope task invalidate_test $end
$upscope $end
$scope task read_write_test $end
$upscope $end
$scope task send_address $end
$upscope $end
$scope task wait_for_resp $end
$upscope $end
$upscope $end
$scope module mem $end
$var wire 15 H address [14:0] $end
$var wire 1 ' clk $end
$var wire 2 I command [1:0] $end
$var wire 16 J data [15:0] $end
$var wire 1 ( reset $end
$var reg 16 K data_buff [15:0] $end
$var reg 4 L rwPosition [3:0] $end
$var integer 32 M SEED [31:0] $end
$scope begin $ivl_for_loop3 $end
$var integer 32 N i [31:0] $end
$upscope $end
$scope begin $ivl_for_loop4 $end
$var integer 32 O i [31:0] $end
$upscope $end
$scope task delay $end
$upscope $end
$upscope $end
$scope task delay $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
b0 O
b0 N
b110111000011110110 M
bx L
bx K
bx J
bz I
bx H
b0 G
bx F
bx E
bz D
bz C
bx B
bz A
bz @
bz ?
bz >
b0 =
b0 <
b0 ;
b0 :
bz 9
bz 8
bx 7
x6
b0 5
bx 4
bx 3
bx 2
bx 1
bz 0
bz /
bz .
bx -
bz ,
bx +
bz *
bz )
0(
x'
bz &
bx %
bz $
bx #
bz "
bz !
$end
#1
b0 L
bz #
bz -
bz J
bz K
b1100011 N
b110000110000011110001000101 M
b100000 ;
1(
#2
b10001 &
b10001 .
b10001 >
b10001 A
b11 !
b11 )
b11 ?
b11 C
b100010000 B
0'
0(
#3
b10001 3
b0 4
b10001 %
b10001 +
b10001 H
b10001 7
b11 5
1'
#4
b10 $
b10 ,
b10 I
b10 8
b0 2
b0 &
b0 .
b0 >
b0 A
0'
#5
b10 L
b1110011000100000 #
b1110011000100000 -
b1110011000100000 J
b1110011000100000 K
1'
#6
b1110011000100000 :
bz !
bz )
bz ?
bz C
0'
#7
b100 L
b1111111111111111 #
b1111111111111111 -
b1111111111111111 J
b1111111111111111 K
1'
#8
b11111111111111111110011000100000 :
b1 <
0'
#9
b110 L
1'
#10
b111111111111111111111111111111111110011000100000 :
b10 <
0'
#11
b1000 L
1'
#12
b1111111111111111111111111111111111111111111111111110011000100000 :
b11 <
0'
#13
b1010 L
1'
#14
b11111111111111111111111111111111111111111111111111111111111111111110011000100000 :
b100 <
0'
#15
b1100 L
1'
#16
b111111111111111111111111111111111111111111111111111111111111111111111111111111111110011000100000 :
b101 <
0'
#17
b1110 L
1'
#18
b1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111110011000100000 :
b110 <
0'
#19
b0 L
b0 #
b0 -
b0 J
b0 K
1'
#20
b111 <
0'
#21
b10 L
b1110011000100000 #
b1110011000100000 -
b1110011000100000 J
b1110011000100000 K
1'
#22
b111 !
b111 )
b111 ?
b111 /
b1110011000100000 "
b1110011000100000 *
b1110011000100000 @
b1110011000100000 0
06
bz $
bz ,
bz I
bz 8
b1000 <
0'
#23
bz #
bz -
bz J
bz K
b0 L
1'
#24
b10001 &
b10001 .
b10001 >
b10001 A
bx1110011000100000 F
b1110011000100000 G
0'
#25
1'
#26
b1111111111111111 "
b1111111111111111 *
b1111111111111111 @
b1111111111111111 0
b10 2
b0 &
b0 .
b0 >
b0 A
0'
#27
1'
#28
bz 5
bz 0
bz /
b10001 &
b10001 .
b10001 >
b10001 A
b101010101010101 "
b101010101010101 *
b101010101010101 @
b101010101010101 D
b111 C
b1010101010101010101010101010101 E
b11111111111111111110011000100000 F
b1111111111111111 G
0'
#29
bx0101010101010101 1
b111 5
1'
#30
b111 /
b1010101010101010101010101010101 1
b0 2
b0 &
b0 .
b0 >
b0 A
0'
#31
1'
#32
bz 5
bz /
b10001 &
b10001 .
b10001 >
b10001 A
b11 !
b11 )
b11 ?
bz "
bz *
bz @
bz D
b11 C
0'
#33
b11 5
1'
#34
bx11 !
bx11 )
bx11 ?
b111 /
b101010101010101 "
b101010101010101 *
b101010101010101 @
b101010101010101 0
b0 &
b0 .
b0 >
b0 A
0'
#35
1'
#36
b10001 &
b10001 .
b10001 >
b10001 A
b11111111111111110101010101010101 F
b101010101010101 G
b111 !
b111 )
b111 ?
bz C
0'
#37
1'
#38
b10 2
b0 &
b0 .
b0 >
b0 A
0'
#39
1'
#40
bz 5
bz "
bz *
bz @
bz 0
bz /
b10001 &
b10001 .
b10001 >
b10001 A
b100 !
b100 )
b100 ?
b100 C
b1010101010101010101010101010101 F
0'
#41
1'
#42
b1xx !
b1xx )
b1xx ?
b111 /
b0 2
b0 &
b0 .
b0 >
b0 A
0'
#43
1'
#44
bz /
b10001 &
b10001 .
b10001 >
b10001 A
b11 !
b11 )
b11 ?
b11 C
0'
#45
b11 5
1'
#46
b10 $
b10 ,
b10 I
b10 8
b0 &
b0 .
b0 >
b0 A
0'
#47
b10 L
b1110011000100000 #
b1110011000100000 -
b1110011000100000 J
b1110011000100000 K
1'
#48
b0 <
bz !
bz )
bz ?
bz C
0'
#49
b100 L
b1111111111111111 #
b1111111111111111 -
b1111111111111111 J
b1111111111111111 K
1'
#50
b1 <
0'
#51
b110 L
1'
#52
b10 <
0'
#53
b1000 L
1'
#54
b11 <
0'
#55
b1010 L
1'
#56
b100 <
0'
#57
b1100 L
1'
#58
b101 <
0'
#59
b1110 L
1'
#60
b110 <
0'
#61
b0 L
b0 #
b0 -
b0 J
b0 K
1'
#62
b111 <
0'
#63
b10 L
b1110011000100000 #
b1110011000100000 -
b1110011000100000 J
b1110011000100000 K
1'
#64
b111 !
b111 )
b111 ?
b111 /
b1110011000100000 "
b1110011000100000 *
b1110011000100000 @
b1110011000100000 0
bz $
bz ,
bz I
bz 8
b1000 <
0'
#65
bz #
bz -
bz J
bz K
b0 L
1'
#66
b10001 &
b10001 .
b10001 >
b10001 A
b1010101010101011110011000100000 F
b1110011000100000 G
0'
#67
1'
#68
b1111111111111111 "
b1111111111111111 *
b1111111111111111 @
b1111111111111111 0
b10 2
b0 &
b0 .
b0 >
b0 A
0'
#69
1'
#70
bz 5
bz "
bz *
bz @
bz 0
bz !
bz )
bz ?
bz /
b11111111111111111110011000100000 F
b1111111111111111 G
0'
