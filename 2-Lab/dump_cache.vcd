$date
	Wed Nov 30 22:46:33 2022
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module testbench $end
$var wire 3 ! cpu_command [2:0] $end
$var wire 16 " cpu_data [15:0] $end
$var wire 16 # mem_data [15:0] $end
$var wire 2 $ mem_command [1:0] $end
$var wire 15 % mem_address [14:0] $end
$var wire 15 & cpu_address [14:0] $end
$var reg 1 ' clk $end
$var reg 1 ( reset $end
$scope module cache $end
$var wire 1 ' clk $end
$var wire 3 ) cpu_command [2:0] $end
$var wire 16 * cpu_data [15:0] $end
$var wire 15 + mem_address [14:0] $end
$var wire 2 , mem_command [1:0] $end
$var wire 16 - mem_data [15:0] $end
$var wire 1 ( reset $end
$var wire 15 . cpu_address [14:0] $end
$var reg 3 / cpu_command_buff [2:0] $end
$var reg 16 0 cpu_data_bus_buff [15:0] $end
$var reg 32 1 cpu_data_to_write [31:0] $end
$var reg 4 2 cpu_offset_buff [3:0] $end
$var reg 5 3 cpu_set_buff [4:0] $end
$var reg 10 4 cpu_tag_buff [9:0] $end
$var reg 3 5 cur_cpu_command [2:0] $end
$var reg 1 6 index_in_set $end
$var reg 15 7 mem_address_buff [14:0] $end
$var reg 2 8 mem_command_buff [1:0] $end
$var reg 16 9 mem_data_buff [15:0] $end
$var reg 128 : mem_line_buff [127:0] $end
$scope begin $ivl_for_loop2 $end
$var integer 32 ; i [31:0] $end
$upscope $end
$scope task delay $end
$upscope $end
$scope task read_cpu_address $end
$upscope $end
$scope task read_from_storage $end
$upscope $end
$scope task replace_from_MM $end
$scope begin $ivl_for_loop0 $end
$var integer 32 < i [31:0] $end
$upscope $end
$upscope $end
$scope task store $end
$upscope $end
$scope task update_flags $end
$upscope $end
$scope task write_to_MM $end
$scope begin $ivl_for_loop1 $end
$var integer 32 = i [31:0] $end
$upscope $end
$upscope $end
$scope task write_to_storage $end
$upscope $end
$upscope $end
$scope module cpu $end
$var wire 15 > address [14:0] $end
$var wire 1 ' clk $end
$var wire 3 ? command [2:0] $end
$var wire 16 @ data [15:0] $end
$var reg 15 A address_bus_buff [14:0] $end
$var reg 19 B cpu_address_buff [18:0] $end
$var reg 3 C cpu_command_buff [2:0] $end
$var reg 16 D data_buff [15:0] $end
$var reg 32 E data_to_write [31:0] $end
$var reg 32 F local_storage [31:0] $end
$var reg 16 G recieved_data [15:0] $end
$scope task READ $end
$upscope $end
$scope task READ16 $end
$upscope $end
$scope task READ32 $end
$upscope $end
$scope task READ8 $end
$upscope $end
$scope task WRITE $end
$upscope $end
$scope task WRITE16 $end
$upscope $end
$scope task WRITE32 $end
$upscope $end
$scope task WRITE8 $end
$upscope $end
$scope task delay $end
$upscope $end
$scope task send_address $end
$upscope $end
$scope task wait_for_resp $end
$upscope $end
$upscope $end
$scope module mem $end
$var wire 15 H address [14:0] $end
$var wire 1 ' clk $end
$var wire 2 I command [1:0] $end
$var wire 16 J data [15:0] $end
$var wire 1 ( reset $end
$var reg 2 K command_buff [1:0] $end
$var reg 16 L data_buff [15:0] $end
$var reg 4 M rwPosition [3:0] $end
$var integer 32 N SEED [31:0] $end
$scope begin $ivl_for_loop3 $end
$var integer 32 O i [31:0] $end
$upscope $end
$scope begin $ivl_for_loop4 $end
$var integer 32 P i [31:0] $end
$upscope $end
$scope begin $ivl_for_loop5 $end
$var integer 32 Q i [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
b0 Q
b0 P
b0 O
b110111000011110110 N
bx M
bx L
bx K
bx J
bz I
bx H
b0 G
bx F
bx E
bz D
bz C
bx B
bz A
bz @
bz ?
bz >
b0 =
b0 <
b0 ;
b0 :
bz 9
bz 8
bx 7
x6
b0 5
bx 4
bx 3
bx 2
bx 1
bz 0
bz /
bz .
bx -
bz ,
bx +
bz *
bz )
0(
x'
bz &
bx %
bz $
bx #
bz "
bz !
$end
#1
b0 M
b0 K
bz #
bz -
bz J
bz L
b1100011 O
b110000110000011110001000101 N
b100000 ;
1(
#2
b1010 &
b1010 .
b1010 >
b1010 A
b11 !
b11 )
b11 ?
b11 C
b10100000 B
0'
0(
#3
b1010 3
b0 4
b1010 %
b1010 +
b1010 H
b1010 7
b11 5
1'
#4
b10 $
b10 ,
b10 I
b10 8
b0 2
b0 &
b0 .
b0 >
b0 A
0'
#5
b10 M
b10000 P
b111001011000010 #
b111001011000010 -
b111001011000010 J
b111001011000010 L
1'
#6
b111001011000010 :
bz !
bz )
bz ?
bz C
0'
#7
b100 M
b0 #
b0 -
b0 J
b0 L
b10000 P
1'
#8
b1 <
0'
#9
b110 M
b10000 P
1'
#10
b10 <
0'
#11
b1000 M
b10000 P
1'
#12
b11 <
0'
#13
b1010 M
b10000 P
1'
#14
b100 <
0'
#15
b1100 M
b10000 P
1'
#16
b101 <
0'
#17
b1110 M
b10000 P
1'
#18
b110 <
0'
#19
b0 M
b10000 P
1'
#20
b111 <
0'
#21
b10 M
b111001011000010 #
b111001011000010 -
b111001011000010 J
b111001011000010 L
b10000 P
1'
#22
b111 !
b111 )
b111 ?
b111 /
b111001011000010 "
b111001011000010 *
b111001011000010 @
b111001011000010 0
06
b0 $
b0 ,
b0 I
b0 8
b1000 <
0'
#23
bz #
bz -
bz J
bz L
b0 M
1'
#24
b1010 &
b1010 .
b1010 >
b1010 A
bx0111001011000010 F
b111001011000010 G
0'
#25
1'
#26
b0 "
b0 *
b0 @
b0 0
b10 2
b0 &
b0 .
b0 >
b0 A
0'
#27
1'
#28
bz 5
bz 0
bz /
b1010 &
b1010 .
b1010 >
b1010 A
b101010101010101 "
b101010101010101 *
b101010101010101 @
b101010101010101 D
b111 C
b1010101010101010101010101010101 E
b111001011000010 F
b0 G
0'
#29
bx0101010101010101 1
b111 5
1'
#30
b111 /
b1010101010101010101010101010101 1
b0 2
b0 &
b0 .
b0 >
b0 A
0'
#31
1'
#32
bz 5
bz /
b1010 &
b1010 .
b1010 >
b1010 A
b11 !
b11 )
b11 ?
bz "
bz *
bz @
bz D
b11 C
0'
#33
b11 5
1'
#34
bx11 !
bx11 )
bx11 ?
b111 /
b101010101010101 "
b101010101010101 *
b101010101010101 @
b101010101010101 0
b0 &
b0 .
b0 >
b0 A
0'
#35
1'
#36
b1010 &
b1010 .
b1010 >
b1010 A
b101010101010101 F
b101010101010101 G
b111 !
b111 )
b111 ?
bz C
0'
#37
1'
#38
b10 2
b0 &
b0 .
b0 >
b0 A
0'
#39
1'
#40
bz 5
bz 0
bz /
b1010 &
b1010 .
b1010 >
b1010 A
b0 "
b0 *
b0 @
b0 D
b111 C
b11111111111111110000000000000000 E
b1010101010101010101010101010101 F
0'
#41
b1010101010101010000000000000000 1
b111 5
1'
#42
b111 /
b11111111111111110000000000000000 1
b0 2
b0 &
b0 .
b0 >
b0 A
b1111111111111111 "
b1111111111111111 *
b1111111111111111 @
b1111111111111111 D
0'
#43
1'
#44
bz 5
bz /
b1010 &
b1010 .
b1010 >
b1010 A
b11 !
b11 )
b11 ?
bz "
bz *
bz @
bz D
b11 C
0'
#45
b11 5
1'
#46
bx11 !
bx11 )
bx11 ?
b111 /
b0 "
b0 *
b0 @
b0 0
b0 &
b0 .
b0 >
b0 A
0'
#47
1'
#48
b1010 &
b1010 .
b1010 >
b1010 A
b1010101010101010000000000000000 F
b0 G
b111 !
b111 )
b111 ?
bz C
0'
#49
1'
#50
b1111111111111111 "
b1111111111111111 *
b1111111111111111 @
b1111111111111111 0
b10 2
b0 &
b0 .
b0 >
b0 A
0'
#51
1'
#52
bz 5
bz "
bz *
bz @
bz 0
bz !
bz )
bz ?
bz /
b11111111111111110000000000000000 F
b1111111111111111 G
0'
