$date
	Wed Nov 30 00:10:45 2022
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module testbench $end
$var wire 16 ! mem_data [15:0] $end
$var wire 2 " mem_command [1:0] $end
$var wire 15 # mem_address [14:0] $end
$var wire 16 $ cpu_data [15:0] $end
$var wire 3 % cpu_command [2:0] $end
$var wire 15 & cpu_address [14:0] $end
$var reg 1 ' clk $end
$var reg 1 ( reset $end
$scope module cache $end
$var wire 1 ' clk $end
$var wire 16 ) cpu_data [15:0] $end
$var wire 15 * mem_address [14:0] $end
$var wire 2 + mem_command [1:0] $end
$var wire 1 ( reset $end
$var wire 16 , mem_data [15:0] $end
$var wire 3 - cpu_command [2:0] $end
$var wire 15 . cpu_address [14:0] $end
$var reg 16 / cpu_data_bus_buff [15:0] $end
$var reg 4 0 cpu_offset_buff [3:0] $end
$var reg 15 1 mem_address_buff [14:0] $end
$var reg 2 2 mem_command_buff [1:0] $end
$var reg 128 3 mem_line_buff [127:0] $end
$scope begin $ivl_for_loop0 $end
$var integer 32 4 i [31:0] $end
$upscope $end
$scope task delay $end
$upscope $end
$upscope $end
$scope module cpu $end
$var wire 1 ' clk $end
$var wire 3 5 command [2:0] $end
$var wire 16 6 data [15:0] $end
$var wire 15 7 address [14:0] $end
$var reg 19 8 cpu_address_buff [18:0] $end
$var reg 3 9 cpu_command_buff [2:0] $end
$var reg 16 : recieved_data [15:0] $end
$scope task delay $end
$upscope $end
$upscope $end
$scope module mem $end
$var wire 15 ; address [14:0] $end
$var wire 1 ' clk $end
$var wire 2 < command [1:0] $end
$var wire 16 = data [15:0] $end
$var wire 1 ( reset $end
$var reg 2 > command_buff [1:0] $end
$var reg 16 ? data_buff [15:0] $end
$var reg 4 @ rwPosition [3:0] $end
$var integer 32 A SEED [31:0] $end
$scope begin $ivl_for_loop1 $end
$var integer 32 B i [31:0] $end
$upscope $end
$scope begin $ivl_for_loop2 $end
$var integer 32 C i [31:0] $end
$upscope $end
$scope begin $ivl_for_loop3 $end
$var integer 32 D i [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
b0 D
b0 C
b0 B
b110111000011110110 A
bx @
bx ?
bx >
bx =
bx <
bx ;
b0 :
bx 9
bx 8
bx 7
b0 6
bx 5
b0 4
b0 3
bx 2
bx 1
bx 0
b0 /
bx .
bx -
bx ,
bx +
bx *
b0 )
0(
x'
bx &
bx %
b0 $
bx #
bx "
bx !
$end
#1
b0 @
b0 >
b0 !
b0 ,
b0 =
b0 ?
b1000 B
b10111101101100001001111000001110 A
1(
#2
b11 &
b11 .
b11 7
b11 8
b1 %
b1 -
b1 5
b1 9
0'
0(
#3
1'
#4
b10 &
b10 .
b10 7
b11 #
b11 *
b11 ;
b11 1
b10 8
0'
#5
1'
#6
b10 "
b10 +
b10 <
b10 2
b10 0
b0 %
b0 -
b0 5
b0 9
0'
#7
b10 @
b1001010110111100 !
b1001010110111100 ,
b1001010110111100 =
b1001010110111100 ?
b10000 C
1'
#8
b1001010110111100 3
0'
#9
b100 @
b1111111111111111 !
b1111111111111111 ,
b1111111111111111 =
b1111111111111111 ?
b10000 C
1'
#10
b11111111111111111001010110111100 3
b1 4
0'
#11
b110 @
b10000 C
1'
#12
b111111111111111111111111111111111001010110111100 3
b10 4
0'
#13
b1000 @
b10000 C
1'
#14
b1111111111111111111111111111111111111111111111111001010110111100 3
b11 4
0'
#15
b1010 @
b10000 C
1'
#16
b11111111111111111111111111111111111111111111111111111111111111111001010110111100 3
b100 4
0'
#17
b1100 @
b10000 C
1'
#18
b111111111111111111111111111111111111111111111111111111111111111111111111111111111001010110111100 3
b101 4
0'
#19
b1110 @
b10000 C
1'
#20
b1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111001010110111100 3
b110 4
0'
#21
b0 @
b0 !
b0 ,
b0 =
b0 ?
b10000 C
1'
#22
b111 4
0'
#23
b10 @
b1001010110111100 !
b1001010110111100 ,
b1001010110111100 =
b1001010110111100 ?
b10000 C
1'
#24
b11111111 $
b11111111 )
b11111111 6
b11111111 /
b0 "
b0 +
b0 <
b0 2
b1000 4
0'
#25
b0 @
1'
#26
b11111111 :
0'
